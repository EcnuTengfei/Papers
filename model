(declare-sort Message)		;declare a sort Message	
(declare-const OneA Message)	;declare the type of message
(declare-const OneB Message)
(declare-const TwoA Message)
(declare-const TwoB Message)
(declare-const msgs Message)
(declare-const maxVBal Int)	; max Value of the ballot
(declare-const maxBal Int)	;max ballot
(declare-const maxVal Int)	;max value
(declare-sort Acceptor)		;declare a type : Acceptor
(declare-const a Acceptor)	;declare a instince of Acceptor 
(declare-const b Int)		
(declare-const type Message)
(declare-const bal Int)
(declare-fun prepare (Message Int) Bool)	;declare the "1a" process with function prepare
(assert (= type OneA))			; m.type = OneA
(assert (= bal b))			; m.bal = b
(assert (= (prepare type b) true)) 	;prepare(OneA, b)
(check-sat)

(declare-const acc Acceptor)
(assert (= type OneA))
(assert (> bal maxBal))			; if the bal is greater than maxBal of an acceptor
(declare-fun promise (Message Int Int Int Acceptor) Bool)	;declare the phase "1b" with promise function
(assert (= (promise type bal maxVBal maxVal acc) true))
(check-sat)


declare-const v Int)
(declare-const c Int)
(declare-fun f (Acceptor Message) Message)
(declare-fun g (Acceptor Int) Int)
(assert (= type TwoA))				; the folowing asserts is the constraint that "2a" must satisfy
(assert (forall ((a Acceptor)) 
			(and (= (f a type) TwoA)
				(= (g a bal) b)
)))
(assert (exists ((v Int))
	 	(exists ((m Message)) 
	 		(and (= (f a type) OneB)
				(= (g a bal) b)
			))
))
(assert (forall ((a Acceptor)) 
		(exists ((m Message)) 
				(= acc a)
)))
(assert (or (exists ((c Int)) 
			(and (> c 0) 
				(< c (- b 1))
		)) 
		(forall ((m Message))
			 (<= maxVBal c)
		)
		(exists ((m Message))
             		(and (= maxVBal c) 
             	      		(= maxVBal v)
		))
))
(declare-fun accept (Message Int Int) Bool)
(assert (= (accept TwoA b v) true))
(check-sat)


(declare-const val Int)
(declare-fun learn (Message Int Int 
			Acceptor) Bool)
(assert (exists ((m Message)) 
		(and (= type TwoA)
			(>= bal maxBal)
		)
))
(assert (= (learn TwoB bal val a) true))
(check-sat)
(get-model)
(get-info :all-statistics)
